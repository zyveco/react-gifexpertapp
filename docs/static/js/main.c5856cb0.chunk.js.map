{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","tittle","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imagenes","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EACxBC,mBAAS,IADe,mBACrDC,EADqD,KACzCC,EADyC,KAkB5D,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,EAAc,CAACE,GAAF,mBAAiBH,KAE9BI,EAAc,MAIhB,SACE,uBAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAjBhB,SAACN,GAEzBF,EAAcE,EAAEO,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIfC,EAJe,iDAIiCC,UACpDH,GALmB,+DASFI,MAAMF,GATJ,cASfG,EATe,gBAWEA,EAAKC,OAXP,uBAWbC,EAXa,EAWbA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,OAAQF,EAAIG,MACZX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAlBjB,kBAuBdM,GAvBc,4CAAH,sDCEPQ,EAAc,SAAC,GAAwB,EAAtBL,GAAuB,IAAnBC,EAAkB,EAAlBA,OAAQV,EAAU,EAAVA,IACxC,OACE,sBAAKe,UAAU,6CAAf,UACE,qBAAKC,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCFGQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECCb,SAACA,GAAc,IAAD,EACdb,mBAAS,CACjCoB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OATAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GACtBH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGZ,CAACrB,IAEGsB,EDf2BK,CAAa3B,GAAjCc,EAFyB,EAE/BP,KAAcc,EAFiB,EAEjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,wCAAd,SAAuDjB,IACtDqB,GACC,mBAAGJ,UAAU,wCAAb,qBAGF,qBAAKA,UAAU,YAAf,SAMGH,EAAOL,KAAI,SAACK,GACX,OAAO,cAAC,EAAD,eAAiCA,GAAfA,EAAOH,aElB7BiB,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,kBADd,mBACzBF,EADyB,KACbC,EADa,KAGhC,OACE,qCACE,6CAEA,cAAC,EAAD,CAAaD,WAAYA,EAAYC,cAAeA,IACpD,uBACA,6BACGD,EAAWwB,KAAI,SAACT,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCV/B6B,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.c5856cb0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ categories, setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    //Tomo el evento e (toca tecla) y lo uso\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // validacion de si me manda algo vacio\r\n    if (inputValue.trim().length > 2) {\r\n      // invoco el set que me dieron y la lista, junto al input\r\n      setCategories([inputValue, ...categories]);\r\n      //reseteo mi input\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\n//El \"setState\" es una funcion, y pongo que es requerida 4thelulz\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  //Guardo en url el url de mi peticion API\r\n  //Dentro de el puse lo que recivi y le clave un encode\r\n  //que me elimina espacios y cosas molestas del string\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=wNgnBe6aznAKmhtYChmYuEfMkPKIqri7`;\r\n\r\n  //Hago la peticion fetch y la guardo en resp\r\n  const resp = await fetch(url);\r\n  //Cambio el formato de la respuesta a un json y lo guardo\r\n  const { data } = await resp.json();\r\n\r\n  //Hago el mapeo del json que consegui y me quedo con cosas especificas\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      tittle: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  //Ponemos todos los tados que saque de gifs en images\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, tittle, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInLeft\">\r\n      <img src={url} alt={tittle} />\r\n      <p>{tittle}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  //Renombro a data como images con el data:images\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeInLeft\">{category}</h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__fadeInLeft\">Loading</p>\r\n      )}\r\n\r\n      <div className=\"card-grid\">\r\n        {/* Mapeo images para tenerlo como y desustructuro sus partes */}\r\n        {/* {images.map(({ id, tittle }) => {\r\n        return <li key={id}>{tittle}</li>;\r\n      })} */}\r\n\r\n        {images.map((images) => {\r\n          return <GifGridItem key={images.id} {...images} />;\r\n          // podria usar images= {images} en vez del ...images\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","//Los hooks normalmente comienzan con hooks\r\n//y conmumente son funciones\r\nimport { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  //Los efectos no pueden ser Async\r\n  useEffect(() => {\r\n    getGifs(category).then((imagenes) => {\r\n      setstate({\r\n        data: imagenes,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state; //data: [], loading: true\r\n};\r\n\r\n// //El use effect hace que lo que este adentro no se recargue\r\n// //por cualquier cosa que mande en esta pagina\r\n// useEffect(() => {\r\n//   //Llamo a la funcion de helper\r\n//   //Le mando la categoria y lo que me devuelve como imagenes\r\n//   //le meto un setImages para tenerlo aca\r\n//   getGifs(category).then((images) => setImages(images));\r\n// }, [category]);\r\n// // con el [category], le digo que si ese cambia, recargue esto\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One punch man\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExperApp</h2>\r\n      {/* envio las 2 partes de mi lista creada como props */}\r\n      <AddCategory categories={categories} setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(\n  <GifExpertApp />,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}